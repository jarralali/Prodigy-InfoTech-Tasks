import os
import time
from tkinter import Tk, filedialog, Button, Label, messagebox, Toplevel
from PIL import Image, ImageTk
import numpy as np

# Create the 'images' directory if it doesn't exist
os.makedirs('images', exist_ok=True)

# Advanced encryption algorithm
def advanced_encrypt(image, key):
    img_array = np.array(image.convert('RGB'))  # Ensure image is in RGB mode
    np.random.seed(key)
    random_positions = np.random.permutation(img_array.size)
    img_array_flat = img_array.flatten()
    encrypted_array_flat = img_array_flat[random_positions]
    encrypted_array = np.reshape(encrypted_array_flat, img_array.shape)
    return Image.fromarray(encrypted_array)

# Advanced decryption algorithm
def advanced_decrypt(image, key):
    img_array = np.array(image.convert('RGB'))  # Ensure image is in RGB mode
    np.random.seed(key)
    random_positions = np.random.permutation(img_array.size)
    decrypted_array_flat = np.zeros_like(img_array.flatten())
    decrypted_array_flat[random_positions] = img_array.flatten()
    decrypted_array = np.reshape(decrypted_array_flat, img_array.shape)
    return Image.fromarray(decrypted_array)

# File selection dialog
def select_image_file():
    file_path = filedialog.askopenfilename(
        title="Select a file",
        filetypes=[("All files", "*.*")],  # Allow all file types
        initialdir=os.getcwd()
    )
    return file_path

# Show the image in a new window
def show_image(image, title):
    image_window = Toplevel()
    image_window.title(title)

    img = ImageTk.PhotoImage(image)
    img_label = Label(image_window, image=img)
    img_label.image = img  # Keep a reference to avoid garbage collection
    img_label.pack()

    image_window.mainloop()

# Encrypt function
def encrypt_image():
    image_path = select_image_file()
    if not image_path:
        messagebox.showerror("Error", "No file selected!")
        return
    
    image = Image.open(image_path)
    key = 42  # Example key, can be any integer
    encrypted_image = advanced_encrypt(image, key)
    
    encrypted_image.save('images/encrypt1.jpg')
    show_image(encrypted_image, "Encrypted Image")
    messagebox.showinfo("Success", "Image encrypted and saved as 'images/encrypt1.jpg'.")

# Decrypt function
def decrypt_image():
    image_path = select_image_file()
    if not image_path:
        messagebox.showerror("Error", "No file selected!")
        return
    
    image = Image.open(image_path)
    key = 42  # Example key, should match the encryption key
    decrypted_image = advanced_decrypt(image, key)
    
    decrypted_image.save('images/decrypt1.jpg')
    show_image(decrypted_image, "Decrypted Image")
    messagebox.showinfo("Success", "Image decrypted and saved as 'images/decrypt1.jpg'.")

# Full-screen title page
def show_title_page():
    title_root = Tk()
    title_root.title("PentestPixel")
    title_root.attributes('-fullscreen', True)  # Make the window full-screen

    # Display title
    title_label = Label(title_root, text="PentestPixel", font=("Arial", 36, "bold"))
    title_label.pack(pady=100)

    title_root.update()
    time.sleep(5)  # Display the title page for 5 seconds
    title_root.destroy()

# Set up the main GUI window
def main_interface():
    root = Tk()
    root.title("PentestPixel")
    root.attributes('-fullscreen', True)  # Make the window full-screen

    # Display a title label
    title_label = Label(root, text="PentestPixel", font=("Arial", 24, "bold"))
    title_label.pack(pady=20)

    # Add buttons for Encrypt and Decrypt
    encrypt_button = Button(root, text="Encrypt", font=("Arial", 14), command=encrypt_image)
    encrypt_button.pack(pady=10)

    decrypt_button = Button(root, text="Decrypt", font=("Arial", 14), command=decrypt_image)
    decrypt_button.pack(pady=10)

    # Start the GUI event loop
    root.mainloop()

# Run the program
if __name__ == "__main__":
    show_title_page()  # Show the title page for 5 seconds
    main_interface()  # Then move to the main interface
