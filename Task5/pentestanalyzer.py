import tkinter as tk
from tkinter import ttk
from scapy.all import sniff, IP
import threading
import socket

# Function to resolve hostname from IP
def resolve_hostname(ip):
    try:
        return socket.gethostbyaddr(ip)[0]
    except socket.herror:
        return "Unknown Host"

# Function to handle packet processing
def process_packet(packet):
    if IP in packet:
        protocol_map = {1: "ICMP", 6: "TCP", 17: "UDP"}
        protocol = protocol_map.get(packet[IP].proto, str(packet[IP].proto))
        
        if selected_protocol.get() != "ALL" and protocol != selected_protocol.get():
            return

        src_ip = packet[IP].src
        dst_ip = packet[IP].dst
        hostname_src = resolve_hostname(src_ip)
        hostname_dst = resolve_hostname(dst_ip)
        
        # Add packet details to the table
        tree.insert("", "end", values=(src_ip, hostname_src, dst_ip, hostname_dst, protocol))

# Function to start sniffing packets
def start_sniffing():
    sniff(prn=process_packet, store=False)

# Function to start the packet capturing in a separate thread
def start_capture():
    capture_thread = threading.Thread(target=start_sniffing)
    capture_thread.daemon = True
    capture_thread.start()

# Setup the main window
root = tk.Tk()
root.title("Network Analyzer")

# Make the window fullscreen
root.attributes("-fullscreen", True)

# Create the title label
title_label = tk.Label(root, text="Network Analyzer", font=("Arial", 24), pady=10)
title_label.pack()

# Create a frame for the protocol selection
protocol_frame = ttk.Frame(root)
protocol_frame.pack(pady=10)

# Protocol selection label
protocol_label = ttk.Label(protocol_frame, text="Select Protocol: ")
protocol_label.pack(side=tk.LEFT)

# Protocol selection dropdown
selected_protocol = tk.StringVar()
selected_protocol.set("ALL")
protocol_options = ["ALL", "TCP", "UDP", "ICMP"]
protocol_menu = ttk.OptionMenu(protocol_frame, selected_protocol, *protocol_options)
protocol_menu.pack(side=tk.LEFT)

# Create a frame for the table
frame = ttk.Frame(root)
frame.pack(fill=tk.BOTH, expand=True)

# Create the table
columns = ("Source IP", "Source Hostname", "Destination IP", "Destination Hostname", "Protocol")
tree = ttk.Treeview(frame, columns=columns, show="headings")
tree.heading("Source IP", text="Source IP")
tree.heading("Source Hostname", text="Source Hostname")
tree.heading("Destination IP", text="Destination IP")
tree.heading("Destination Hostname", text="Destination Hostname")
tree.heading("Protocol", text="Protocol")

# Add a scrollbar
scrollbar = ttk.Scrollbar(frame, orient=tk.VERTICAL, command=tree.yview)
tree.configure(yscroll=scrollbar.set)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
tree.pack(fill=tk.BOTH, expand=True)

# Start button to begin packet capturing
start_button = ttk.Button(root, text="Start Capture", command=start_capture)
start_button.pack(side=tk.BOTTOM, pady=10)

# Run the GUI event loop
root.mainloop()
