import tkinter as tk
from tkinter import messagebox
import re

# Function to check password strength
def check_password_strength(password: str) -> str:
    length_criteria = len(password) >= 8
    uppercase_criteria = re.search(r'[A-Z]', password) is not None
    lowercase_criteria = re.search(r'[a-z]', password) is not None
    digit_criteria = re.search(r'[0-9]', password) is not None
    special_criteria = re.search(r'[!@#$%^&*(),.?":{}|<>]', password) is not None

    # Count criteria met
    criteria_met = sum([
        length_criteria,
        uppercase_criteria,
        lowercase_criteria,
        digit_criteria,
        special_criteria
    ])

    # Determine password strength
    if criteria_met == 5 and len(password) > 12:
        strength = "Very Strong"
    elif criteria_met == 4:
        strength = "Strong"
    elif criteria_met == 3:
        strength = "Moderate"
    elif criteria_met == 2:
        strength = "Weak"
    else:
        strength = "Very Weak"

    feedback = {
        "Very Strong": "Your password is very strong. Great job!",
        "Strong": "Your password is strong, but consider increasing the length for better security.",
        "Moderate": "Your password is moderate. Add special characters or digits to make it stronger.",
        "Weak": "Your password is weak. Consider adding uppercase letters, digits, or special characters.",
        "Very Weak": "Your password is very weak. It needs to be longer with a mix of letters, digits, and special characters."
    }

    return f"Password Strength: {strength}\nFeedback: {feedback[strength]}"

# Function to display the result in the GUI
def display_password_strength():
    password = password_entry.get()  # Get the input password
    result = check_password_strength(password)  # Assess password strength
    result_label.config(text=result)  # Display result in the label

# Create the main window (full screen)
root = tk.Tk()
root.title("PentestPass - Password Complexity Checker")
root.attributes('-fullscreen', True)  # Full-screen mode

# Create a frame for layout
frame = tk.Frame(root, padx=50, pady=50)
frame.pack(expand=True)

# Title label
title_label = tk.Label(frame, text="PentestPass - Advanced Password Complexity Checker", font=("Helvetica", 24, "bold"))
title_label.pack(pady=20)

# Instruction label
instruction_label = tk.Label(frame, text="Enter your password below to check its strength:", font=("Helvetica", 14))
instruction_label.pack(pady=10)

# Password entry field (password is not hidden)
password_entry = tk.Entry(frame, font=("Helvetica", 18), width=40)
password_entry.pack(pady=20)

# Check Password button
check_button = tk.Button(frame, text="Check Password Strength", font=("Helvetica", 14), command=display_password_strength)
check_button.pack(pady=20)

# Label to display the result
result_label = tk.Label(frame, text="", font=("Helvetica", 16), wraplength=600, justify="center")
result_label.pack(pady=20)

# Function to close the app
def close_app():
    if messagebox.askokcancel("Quit", "Do you want to exit?"):
        root.destroy()

# Add a close button
close_button = tk.Button(root, text="Exit", font=("Helvetica", 14), command=close_app)
close_button.pack(side="bottom", pady=20)

# Bind the Escape key to close the application
root.bind('<Escape>', lambda e: close_app())

# Start the main event loop
root.mainloop()
